<html lang="en" ng-app="earsiv">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Earsiv_Portal</title>

    <style>
        .modal-content {
            max-width: 80%; /* Maksimum genişlik */
            max-height: 80%; /* Maksimum yükseklik */
            overflow-y: auto; /* Dikey kaydırma çubuğu ekle */
        }


        .centered-cell {
            text-align: center;
            vertical-align: middle;
        }

        /* Sayfalama butonlarının genel stilleri */
        dir-pagination-controls {
            display: flex;
            justify-content: center;
            margin-top: 20px;
            font-family: Arial, sans-serif;
        }

        dir-pagination-controls ul {
            list-style: none;
            padding: 0;
            margin: 0;
            display: flex;
            gap: 8px;
        }

        dir-pagination-controls li {
            display: inline;
        }

            dir-pagination-controls li a {
                padding: 8px 12px;
                text-decoration: none;
                color: #007bff;
                border: 1px solid #ddd;
                border-radius: 4px;
                transition: background-color 0.3s, color 0.3s;
            }

                dir-pagination-controls li a:hover {
                    background-color: #007bff;
                    color: #fff;
                }

            dir-pagination-controls li.active a {
                background-color: #007bff;
                color: #fff;
                border-color: #007bff;
            }

            dir-pagination-controls li.disabled a {
                color: #ccc;
                cursor: not-allowed;
            }

            /* Önceki ve Sonraki butonları */
            dir-pagination-controls li a[ng-click*="prev"],
            dir-pagination-controls li a[ng-click*="next"] {
                font-weight: bold;
                color: #555;
            }

                dir-pagination-controls li a[ng-click*="prev"]:hover,
                dir-pagination-controls li a[ng-click*="next"]:hover {
                    background-color: #eee;
                    color: #333;
                }

    </style>

    <!-- Gerekli stiller dosyaları -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.css" />
    <link rel="stylesheet" href="~/css/site.css" />

    <!-- AngularJS script kütüphanesi eklendi -->
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
    <script src="https://rawgit.com/michaelbromley/angularUtils-pagination/master/dirPagination.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/angular-sanitize/1.8.3/angular-sanitize.js"></script>
</head>
<body class="container p-5" ng-init="isModalOpen = false">
    <!-- AngularJS app oluşturuldu -->
    <script>
        var earsivApp = angular.module('earsiv', ['angularUtils.directives.dirPagination', 'ngSanitize']);

        angular.module('earsiv').run(function ($rootScope) {
            $rootScope.BelgeListesiGlobal = []; // Belge Listesi Global olarak tanımlandı
        });
    </script>
    
    @RenderBody()

    <!-- Gerekli JS CDN eklemeleri -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.qrcode/1.0/jquery.qrcode.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/js/bootstrap.min.js" ></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <script>
        // Date Controller
        earsivApp.controller('formController', function ($scope, $http, $sce, $rootScope) {
            $scope.date = {};

            // Tarih alanlarına ilk değerler atandı
            $scope.date.startDate = new Date('@DateTime.Now.ToString("yyyy-MM-dd")');
            $scope.date.endDate = new Date('@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")');

            $scope.getData = function (date) {

                // GET Method
                $http.get('/Earsiv/GetData?StartDate=' + formatDate($scope.date.startDate) + '&EndDate=' + formatDate($scope.date.endDate))
                    .then(function (response) {
                        // Başarılı
                        ShowToast("İşlem başarılı", 3);
                        $rootScope.$broadcast('BelgeListesiGuncelleme', response.data.data);

                    }, function (error) {
                        ShowToast(error, -1);
                });
            }
        });

        // Table Button Controller
        earsivApp.controller('buttonController', function ($scope, $http, $sce, $rootScope) {
            // Modal'ı açma işlevi
            $scope.openModal = function (htmlContent) {
                $scope.modalHtmlContent = $sce.trustAsHtml(htmlContent);
                $('#documentModal').modal('show'); // Bootstrap modal'ı aç
            };

            // Modal'ı kapatma işlevi
            $scope.closeModal = function () {
                $('#documentModal').modal('hide'); // Bootstrap modal'ı kapat
                $scope.modalHtmlContent = ''; // İçeriği temizle
            };


            // Arama anahtarı değiştiğinde filtreleme yapılır
            $scope.$watch('searchKey', function (newVal) {
                // Arama işlemi diğer controller içerisinde tetikleniyor
                $rootScope.$broadcast('BelgeListesiFiltrele', newVal);
            });

            // Belge Görüntüleme işlevi
            $scope.belgeGoruntule = function () {
                var seciliBelgeler = $('.belge-check').filter(':checked'); // Tablo içerisinden seçilen belgeler listelendi
                
                // Seçilen belge sayısı birden fazla ise
                if (seciliBelgeler.length > 1) {
                    ShowToast('Birden fazla belge üzerinden görüntüleme işlemi yapamazsınız!', 0);
                }
                else if (seciliBelgeler.length == 0) { // Hiç belge seçilmediyse
                    ShowToast('Görüntüleme işlemi için, lütfen önce belge seçiniz!', 0);
                }
                else { // Sadece bir belge seçildi ise
                    var belgeId = seciliBelgeler.eq(0).attr('id').replace(/^belge_/, ''); // Seçili belgenin Belge numarası alındı
                    
                    // Belge Listesi içerisinden bu belge numarasına ait belge bulunup bilgileri alınıyor
                    var belge = $rootScope.BelgeListesiGlobal.find(function (item) {
                        return item.belgeNumarasi == belgeId;
                    });
                    
                    // Belge görüntüsü için arka plana get isteği atılıyor
                    $http.get('/Earsiv/ShowDocument?Ettn=' + belge.ettn + '&Onay=' + belge.onayDurumu).then(function (response) {
                        // Eğer belge başarılı ile alındı ise
                        if (response.data.item1 == 3) {
                            $scope.openModal(response.data.item2);
                        }
                        else {
                            ShowToast('Belge bulunamadı!', 0);
                        }

                    }, function (error) {
                        ShowToast(error, -1);
                    });
                }
            }

            // Belge Yazdırma İşlevi
            $scope.belgeYazdir = function () {
                var seciliBelgeler = $('.belge-check').filter(':checked');
                if (seciliBelgeler.length !== 1) {
                    ShowToast('Yazdırma işlemi için yalnızca bir belge seçmelisiniz!', 0);
                    return;
                }

                var belgeId = seciliBelgeler.eq(0).attr('id').replace(/^belge_/, '');
                var belge = $rootScope.BelgeListesiGlobal.find(function (item) {
                    return item.belgeNumarasi == belgeId;
                });

                $http.get('/Earsiv/ShowDocument?Ettn=' + belge.ettn + '&Onay=' + belge.onayDurumu)
                    .then(function (response) {
                        if (response.data.item1 === 3) {
                            var printWindow = window.open('', '_blank');
                            printWindow.document.write(response.data.item2);
                            printWindow.document.close();
                            printWindow.print();
                        } else {
                            ShowToast('Belge bulunamadı!', 0);
                        }
                    }, function (error) {
                        ShowToast(error, -1);
                    });
            };

            // Belge İndirme İşlevi
            $scope.belgeIndir = function () {
                var seciliBelgeler = $('.belge-check').filter(':checked');
                if (seciliBelgeler.length !== 1) {
                    ShowToast('İndirme işlemi için yalnızca bir belge seçmelisiniz!', 0);
                    return;
                }

                var belgeId = seciliBelgeler.eq(0).attr('id').replace(/^belge_/, '');
                var belge = $rootScope.BelgeListesiGlobal.find(function (item) {
                    return item.belgeNumarasi == belgeId;
                });

                $http.get('/Earsiv/ShowDocument?Ettn=' + belge.ettn + '&Onay=' + belge.onayDurumu)
                    .then(function (response) {
                        if (response.data.item1 === 3) {
                            var blob = new Blob([response.data.item2], { type: 'text/html' });
                            var link = document.createElement('a');
                            link.href = window.URL.createObjectURL(blob);
                            link.download = `${belgeId}.html`;
                            link.click();
                            window.URL.revokeObjectURL(link.href);
                        } else {
                            ShowToast('Belge bulunamadı!', 0);
                        }
                    }, function (error) {
                        ShowToast(error, -1);
                    });
            };
        });

        // Table Controller
        earsivApp.controller('tableController', function ($scope, $http, $sce, $rootScope) {
            // Sorgula butonuna tıklanması sonrası veri listeleme işlemi bu controller içerisinde tetiklendi
            $scope.$on('BelgeListesiGuncelleme', function (event, data) {
                // Onaylı sütunu bilgisi simge olarak ayarlanıyor
                $scope.BelgeListesi = data.map(item => {
                    if (item.onayDurumu === 'Onaylandı') {
                        item.onayDurumu = 'check';  // Tik işareti
                    } else if (item.onayDurumu === 'Onaylanmadı') {
                        item.onayDurumu = 'ban';  // Engel ifadesi
                    } else if (item.onayDurumu === 'Silinmiş') {
                        item.onayDurumu = 'times';  // Çarpı işareti
                    }
                    return item;
                });

                // Liste Aktarımı yapılıyor
                $scope.FiltreliBelgeListesi = $scope.BelgeListesi;
                $rootScope.BelgeListesiGlobal = $scope.BelgeListesi;
            });

            // Arama alanına yazı yazıldığında veri filtreleme işlemi bu controller içerisinde tetiklendi
            $scope.$on('BelgeListesiFiltrele', function (event, data) {
                if (!data) {
                    // Arama boşsa tüm listeyi göster
                    $scope.FiltreliBelgeListesi = $scope.BelgeListesi;
                } else {
                    // Eğer BelgeListesi boş değilse arama yapılıyor
                    if($scope.BelgeListesi != undefined){
                        // Arama anahtarı tanımlı ise filtreleme yap
                        $scope.FiltreliBelgeListesi = $scope.BelgeListesi.filter(item =>
                            (item.belgeNumarasi && item.belgeNumarasi.includes(data)) ||
                            (item.aliciVknTckn && item.aliciVknTckn.includes(data)) ||
                            (item.aliciUnvanAdSoyad && item.aliciUnvanAdSoyad.includes(data)) ||
                            (item.belgeTuru && item.belgeTuru.includes(data))
                        );

                        $rootScope.BelgeListesiGlobal = $scope.BelgeListesi;
                    }
                }
            });
        });
    </script>

    <!-- Genel Fonksiyonlar ve Tanımlar -->
    <script>
        // Tarih formatını Backend formatına uyarlayan fonksiyon
        function formatDate(date) {
            if (!date) return '';
            var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear();

            if (month.length < 2) month = '0' + month;
            if (day.length < 2) day = '0' + day;

            return [year, month, day].join('-');
        }

        // Toastr Mesaj bildirimi tanım ve fonksiyonları
        toastr.options = {
            "closeButton": true,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "preventDuplicates": true,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }

        // Toast Mesajı Gösteren Fonksiyon
        function ShowToast(msg, type) {
            if (type == 3) {
                toastr.success(msg, 'Başarılı');
            }
            else if (type == 0) {
                toastr.warning(msg, 'Uyarı');
            }
            else if (type == 1) {
                toastr.info(msg, 'Bilgi');
            }
            else if (type == -1) {
                toastr.error(msg, 'Hata');
            }
        }
    </script>
</body>
</html>
